
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `SharedAccess` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model SharedAccess
 * 
 */
export type SharedAccessModel = runtime.Types.Result.DefaultSelection<Prisma.$SharedAccessPayload>

export type AggregateSharedAccess = {
  _count: SharedAccessCountAggregateOutputType | null
  _min: SharedAccessMinAggregateOutputType | null
  _max: SharedAccessMaxAggregateOutputType | null
}

export type SharedAccessMinAggregateOutputType = {
  id: string | null
  ownerWallet: string | null
  viewerWallet: string | null
  mintAddress: string | null
  status: string | null
  createdAt: Date | null
}

export type SharedAccessMaxAggregateOutputType = {
  id: string | null
  ownerWallet: string | null
  viewerWallet: string | null
  mintAddress: string | null
  status: string | null
  createdAt: Date | null
}

export type SharedAccessCountAggregateOutputType = {
  id: number
  ownerWallet: number
  viewerWallet: number
  mintAddress: number
  status: number
  createdAt: number
  _all: number
}


export type SharedAccessMinAggregateInputType = {
  id?: true
  ownerWallet?: true
  viewerWallet?: true
  mintAddress?: true
  status?: true
  createdAt?: true
}

export type SharedAccessMaxAggregateInputType = {
  id?: true
  ownerWallet?: true
  viewerWallet?: true
  mintAddress?: true
  status?: true
  createdAt?: true
}

export type SharedAccessCountAggregateInputType = {
  id?: true
  ownerWallet?: true
  viewerWallet?: true
  mintAddress?: true
  status?: true
  createdAt?: true
  _all?: true
}

export type SharedAccessAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which SharedAccess to aggregate.
   */
  where?: Prisma.SharedAccessWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of SharedAccesses to fetch.
   */
  orderBy?: Prisma.SharedAccessOrderByWithRelationInput | Prisma.SharedAccessOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.SharedAccessWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` SharedAccesses from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` SharedAccesses.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned SharedAccesses
  **/
  _count?: true | SharedAccessCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: SharedAccessMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: SharedAccessMaxAggregateInputType
}

export type GetSharedAccessAggregateType<T extends SharedAccessAggregateArgs> = {
      [P in keyof T & keyof AggregateSharedAccess]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateSharedAccess[P]>
    : Prisma.GetScalarType<T[P], AggregateSharedAccess[P]>
}




export type SharedAccessGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.SharedAccessWhereInput
  orderBy?: Prisma.SharedAccessOrderByWithAggregationInput | Prisma.SharedAccessOrderByWithAggregationInput[]
  by: Prisma.SharedAccessScalarFieldEnum[] | Prisma.SharedAccessScalarFieldEnum
  having?: Prisma.SharedAccessScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: SharedAccessCountAggregateInputType | true
  _min?: SharedAccessMinAggregateInputType
  _max?: SharedAccessMaxAggregateInputType
}

export type SharedAccessGroupByOutputType = {
  id: string
  ownerWallet: string
  viewerWallet: string
  mintAddress: string
  status: string
  createdAt: Date
  _count: SharedAccessCountAggregateOutputType | null
  _min: SharedAccessMinAggregateOutputType | null
  _max: SharedAccessMaxAggregateOutputType | null
}

type GetSharedAccessGroupByPayload<T extends SharedAccessGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<SharedAccessGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof SharedAccessGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], SharedAccessGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], SharedAccessGroupByOutputType[P]>
      }
    >
  >



export type SharedAccessWhereInput = {
  AND?: Prisma.SharedAccessWhereInput | Prisma.SharedAccessWhereInput[]
  OR?: Prisma.SharedAccessWhereInput[]
  NOT?: Prisma.SharedAccessWhereInput | Prisma.SharedAccessWhereInput[]
  id?: Prisma.StringFilter<"SharedAccess"> | string
  ownerWallet?: Prisma.StringFilter<"SharedAccess"> | string
  viewerWallet?: Prisma.StringFilter<"SharedAccess"> | string
  mintAddress?: Prisma.StringFilter<"SharedAccess"> | string
  status?: Prisma.StringFilter<"SharedAccess"> | string
  createdAt?: Prisma.DateTimeFilter<"SharedAccess"> | Date | string
}

export type SharedAccessOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  ownerWallet?: Prisma.SortOrder
  viewerWallet?: Prisma.SortOrder
  mintAddress?: Prisma.SortOrder
  status?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
}

export type SharedAccessWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.SharedAccessWhereInput | Prisma.SharedAccessWhereInput[]
  OR?: Prisma.SharedAccessWhereInput[]
  NOT?: Prisma.SharedAccessWhereInput | Prisma.SharedAccessWhereInput[]
  ownerWallet?: Prisma.StringFilter<"SharedAccess"> | string
  viewerWallet?: Prisma.StringFilter<"SharedAccess"> | string
  mintAddress?: Prisma.StringFilter<"SharedAccess"> | string
  status?: Prisma.StringFilter<"SharedAccess"> | string
  createdAt?: Prisma.DateTimeFilter<"SharedAccess"> | Date | string
}, "id">

export type SharedAccessOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  ownerWallet?: Prisma.SortOrder
  viewerWallet?: Prisma.SortOrder
  mintAddress?: Prisma.SortOrder
  status?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  _count?: Prisma.SharedAccessCountOrderByAggregateInput
  _max?: Prisma.SharedAccessMaxOrderByAggregateInput
  _min?: Prisma.SharedAccessMinOrderByAggregateInput
}

export type SharedAccessScalarWhereWithAggregatesInput = {
  AND?: Prisma.SharedAccessScalarWhereWithAggregatesInput | Prisma.SharedAccessScalarWhereWithAggregatesInput[]
  OR?: Prisma.SharedAccessScalarWhereWithAggregatesInput[]
  NOT?: Prisma.SharedAccessScalarWhereWithAggregatesInput | Prisma.SharedAccessScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"SharedAccess"> | string
  ownerWallet?: Prisma.StringWithAggregatesFilter<"SharedAccess"> | string
  viewerWallet?: Prisma.StringWithAggregatesFilter<"SharedAccess"> | string
  mintAddress?: Prisma.StringWithAggregatesFilter<"SharedAccess"> | string
  status?: Prisma.StringWithAggregatesFilter<"SharedAccess"> | string
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"SharedAccess"> | Date | string
}

export type SharedAccessCreateInput = {
  id?: string
  ownerWallet: string
  viewerWallet: string
  mintAddress: string
  status?: string
  createdAt?: Date | string
}

export type SharedAccessUncheckedCreateInput = {
  id?: string
  ownerWallet: string
  viewerWallet: string
  mintAddress: string
  status?: string
  createdAt?: Date | string
}

export type SharedAccessUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  ownerWallet?: Prisma.StringFieldUpdateOperationsInput | string
  viewerWallet?: Prisma.StringFieldUpdateOperationsInput | string
  mintAddress?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type SharedAccessUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  ownerWallet?: Prisma.StringFieldUpdateOperationsInput | string
  viewerWallet?: Prisma.StringFieldUpdateOperationsInput | string
  mintAddress?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type SharedAccessCreateManyInput = {
  id?: string
  ownerWallet: string
  viewerWallet: string
  mintAddress: string
  status?: string
  createdAt?: Date | string
}

export type SharedAccessUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  ownerWallet?: Prisma.StringFieldUpdateOperationsInput | string
  viewerWallet?: Prisma.StringFieldUpdateOperationsInput | string
  mintAddress?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type SharedAccessUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  ownerWallet?: Prisma.StringFieldUpdateOperationsInput | string
  viewerWallet?: Prisma.StringFieldUpdateOperationsInput | string
  mintAddress?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type SharedAccessCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  ownerWallet?: Prisma.SortOrder
  viewerWallet?: Prisma.SortOrder
  mintAddress?: Prisma.SortOrder
  status?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
}

export type SharedAccessMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  ownerWallet?: Prisma.SortOrder
  viewerWallet?: Prisma.SortOrder
  mintAddress?: Prisma.SortOrder
  status?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
}

export type SharedAccessMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  ownerWallet?: Prisma.SortOrder
  viewerWallet?: Prisma.SortOrder
  mintAddress?: Prisma.SortOrder
  status?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
}

export type StringFieldUpdateOperationsInput = {
  set?: string
}

export type DateTimeFieldUpdateOperationsInput = {
  set?: Date | string
}



export type SharedAccessSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  ownerWallet?: boolean
  viewerWallet?: boolean
  mintAddress?: boolean
  status?: boolean
  createdAt?: boolean
}, ExtArgs["result"]["sharedAccess"]>

export type SharedAccessSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  ownerWallet?: boolean
  viewerWallet?: boolean
  mintAddress?: boolean
  status?: boolean
  createdAt?: boolean
}, ExtArgs["result"]["sharedAccess"]>

export type SharedAccessSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  ownerWallet?: boolean
  viewerWallet?: boolean
  mintAddress?: boolean
  status?: boolean
  createdAt?: boolean
}, ExtArgs["result"]["sharedAccess"]>

export type SharedAccessSelectScalar = {
  id?: boolean
  ownerWallet?: boolean
  viewerWallet?: boolean
  mintAddress?: boolean
  status?: boolean
  createdAt?: boolean
}

export type SharedAccessOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "ownerWallet" | "viewerWallet" | "mintAddress" | "status" | "createdAt", ExtArgs["result"]["sharedAccess"]>

export type $SharedAccessPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "SharedAccess"
  objects: {}
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    ownerWallet: string
    viewerWallet: string
    mintAddress: string
    status: string
    createdAt: Date
  }, ExtArgs["result"]["sharedAccess"]>
  composites: {}
}

export type SharedAccessGetPayload<S extends boolean | null | undefined | SharedAccessDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$SharedAccessPayload, S>

export type SharedAccessCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<SharedAccessFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: SharedAccessCountAggregateInputType | true
  }

export interface SharedAccessDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['SharedAccess'], meta: { name: 'SharedAccess' } }
  /**
   * Find zero or one SharedAccess that matches the filter.
   * @param {SharedAccessFindUniqueArgs} args - Arguments to find a SharedAccess
   * @example
   * // Get one SharedAccess
   * const sharedAccess = await prisma.sharedAccess.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends SharedAccessFindUniqueArgs>(args: Prisma.SelectSubset<T, SharedAccessFindUniqueArgs<ExtArgs>>): Prisma.Prisma__SharedAccessClient<runtime.Types.Result.GetResult<Prisma.$SharedAccessPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one SharedAccess that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {SharedAccessFindUniqueOrThrowArgs} args - Arguments to find a SharedAccess
   * @example
   * // Get one SharedAccess
   * const sharedAccess = await prisma.sharedAccess.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends SharedAccessFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, SharedAccessFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__SharedAccessClient<runtime.Types.Result.GetResult<Prisma.$SharedAccessPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first SharedAccess that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SharedAccessFindFirstArgs} args - Arguments to find a SharedAccess
   * @example
   * // Get one SharedAccess
   * const sharedAccess = await prisma.sharedAccess.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends SharedAccessFindFirstArgs>(args?: Prisma.SelectSubset<T, SharedAccessFindFirstArgs<ExtArgs>>): Prisma.Prisma__SharedAccessClient<runtime.Types.Result.GetResult<Prisma.$SharedAccessPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first SharedAccess that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SharedAccessFindFirstOrThrowArgs} args - Arguments to find a SharedAccess
   * @example
   * // Get one SharedAccess
   * const sharedAccess = await prisma.sharedAccess.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends SharedAccessFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, SharedAccessFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__SharedAccessClient<runtime.Types.Result.GetResult<Prisma.$SharedAccessPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more SharedAccesses that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SharedAccessFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all SharedAccesses
   * const sharedAccesses = await prisma.sharedAccess.findMany()
   * 
   * // Get first 10 SharedAccesses
   * const sharedAccesses = await prisma.sharedAccess.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const sharedAccessWithIdOnly = await prisma.sharedAccess.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends SharedAccessFindManyArgs>(args?: Prisma.SelectSubset<T, SharedAccessFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$SharedAccessPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a SharedAccess.
   * @param {SharedAccessCreateArgs} args - Arguments to create a SharedAccess.
   * @example
   * // Create one SharedAccess
   * const SharedAccess = await prisma.sharedAccess.create({
   *   data: {
   *     // ... data to create a SharedAccess
   *   }
   * })
   * 
   */
  create<T extends SharedAccessCreateArgs>(args: Prisma.SelectSubset<T, SharedAccessCreateArgs<ExtArgs>>): Prisma.Prisma__SharedAccessClient<runtime.Types.Result.GetResult<Prisma.$SharedAccessPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many SharedAccesses.
   * @param {SharedAccessCreateManyArgs} args - Arguments to create many SharedAccesses.
   * @example
   * // Create many SharedAccesses
   * const sharedAccess = await prisma.sharedAccess.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends SharedAccessCreateManyArgs>(args?: Prisma.SelectSubset<T, SharedAccessCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many SharedAccesses and returns the data saved in the database.
   * @param {SharedAccessCreateManyAndReturnArgs} args - Arguments to create many SharedAccesses.
   * @example
   * // Create many SharedAccesses
   * const sharedAccess = await prisma.sharedAccess.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many SharedAccesses and only return the `id`
   * const sharedAccessWithIdOnly = await prisma.sharedAccess.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends SharedAccessCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, SharedAccessCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$SharedAccessPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a SharedAccess.
   * @param {SharedAccessDeleteArgs} args - Arguments to delete one SharedAccess.
   * @example
   * // Delete one SharedAccess
   * const SharedAccess = await prisma.sharedAccess.delete({
   *   where: {
   *     // ... filter to delete one SharedAccess
   *   }
   * })
   * 
   */
  delete<T extends SharedAccessDeleteArgs>(args: Prisma.SelectSubset<T, SharedAccessDeleteArgs<ExtArgs>>): Prisma.Prisma__SharedAccessClient<runtime.Types.Result.GetResult<Prisma.$SharedAccessPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one SharedAccess.
   * @param {SharedAccessUpdateArgs} args - Arguments to update one SharedAccess.
   * @example
   * // Update one SharedAccess
   * const sharedAccess = await prisma.sharedAccess.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends SharedAccessUpdateArgs>(args: Prisma.SelectSubset<T, SharedAccessUpdateArgs<ExtArgs>>): Prisma.Prisma__SharedAccessClient<runtime.Types.Result.GetResult<Prisma.$SharedAccessPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more SharedAccesses.
   * @param {SharedAccessDeleteManyArgs} args - Arguments to filter SharedAccesses to delete.
   * @example
   * // Delete a few SharedAccesses
   * const { count } = await prisma.sharedAccess.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends SharedAccessDeleteManyArgs>(args?: Prisma.SelectSubset<T, SharedAccessDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more SharedAccesses.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SharedAccessUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many SharedAccesses
   * const sharedAccess = await prisma.sharedAccess.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends SharedAccessUpdateManyArgs>(args: Prisma.SelectSubset<T, SharedAccessUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more SharedAccesses and returns the data updated in the database.
   * @param {SharedAccessUpdateManyAndReturnArgs} args - Arguments to update many SharedAccesses.
   * @example
   * // Update many SharedAccesses
   * const sharedAccess = await prisma.sharedAccess.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more SharedAccesses and only return the `id`
   * const sharedAccessWithIdOnly = await prisma.sharedAccess.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends SharedAccessUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, SharedAccessUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$SharedAccessPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one SharedAccess.
   * @param {SharedAccessUpsertArgs} args - Arguments to update or create a SharedAccess.
   * @example
   * // Update or create a SharedAccess
   * const sharedAccess = await prisma.sharedAccess.upsert({
   *   create: {
   *     // ... data to create a SharedAccess
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the SharedAccess we want to update
   *   }
   * })
   */
  upsert<T extends SharedAccessUpsertArgs>(args: Prisma.SelectSubset<T, SharedAccessUpsertArgs<ExtArgs>>): Prisma.Prisma__SharedAccessClient<runtime.Types.Result.GetResult<Prisma.$SharedAccessPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of SharedAccesses.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SharedAccessCountArgs} args - Arguments to filter SharedAccesses to count.
   * @example
   * // Count the number of SharedAccesses
   * const count = await prisma.sharedAccess.count({
   *   where: {
   *     // ... the filter for the SharedAccesses we want to count
   *   }
   * })
  **/
  count<T extends SharedAccessCountArgs>(
    args?: Prisma.Subset<T, SharedAccessCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], SharedAccessCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a SharedAccess.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SharedAccessAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends SharedAccessAggregateArgs>(args: Prisma.Subset<T, SharedAccessAggregateArgs>): Prisma.PrismaPromise<GetSharedAccessAggregateType<T>>

  /**
   * Group by SharedAccess.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SharedAccessGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends SharedAccessGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: SharedAccessGroupByArgs['orderBy'] }
      : { orderBy?: SharedAccessGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, SharedAccessGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSharedAccessGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the SharedAccess model
 */
readonly fields: SharedAccessFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for SharedAccess.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__SharedAccessClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the SharedAccess model
 */
export interface SharedAccessFieldRefs {
  readonly id: Prisma.FieldRef<"SharedAccess", 'String'>
  readonly ownerWallet: Prisma.FieldRef<"SharedAccess", 'String'>
  readonly viewerWallet: Prisma.FieldRef<"SharedAccess", 'String'>
  readonly mintAddress: Prisma.FieldRef<"SharedAccess", 'String'>
  readonly status: Prisma.FieldRef<"SharedAccess", 'String'>
  readonly createdAt: Prisma.FieldRef<"SharedAccess", 'DateTime'>
}
    

// Custom InputTypes
/**
 * SharedAccess findUnique
 */
export type SharedAccessFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the SharedAccess
   */
  select?: Prisma.SharedAccessSelect<ExtArgs> | null
  /**
   * Omit specific fields from the SharedAccess
   */
  omit?: Prisma.SharedAccessOmit<ExtArgs> | null
  /**
   * Filter, which SharedAccess to fetch.
   */
  where: Prisma.SharedAccessWhereUniqueInput
}

/**
 * SharedAccess findUniqueOrThrow
 */
export type SharedAccessFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the SharedAccess
   */
  select?: Prisma.SharedAccessSelect<ExtArgs> | null
  /**
   * Omit specific fields from the SharedAccess
   */
  omit?: Prisma.SharedAccessOmit<ExtArgs> | null
  /**
   * Filter, which SharedAccess to fetch.
   */
  where: Prisma.SharedAccessWhereUniqueInput
}

/**
 * SharedAccess findFirst
 */
export type SharedAccessFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the SharedAccess
   */
  select?: Prisma.SharedAccessSelect<ExtArgs> | null
  /**
   * Omit specific fields from the SharedAccess
   */
  omit?: Prisma.SharedAccessOmit<ExtArgs> | null
  /**
   * Filter, which SharedAccess to fetch.
   */
  where?: Prisma.SharedAccessWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of SharedAccesses to fetch.
   */
  orderBy?: Prisma.SharedAccessOrderByWithRelationInput | Prisma.SharedAccessOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for SharedAccesses.
   */
  cursor?: Prisma.SharedAccessWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` SharedAccesses from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` SharedAccesses.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of SharedAccesses.
   */
  distinct?: Prisma.SharedAccessScalarFieldEnum | Prisma.SharedAccessScalarFieldEnum[]
}

/**
 * SharedAccess findFirstOrThrow
 */
export type SharedAccessFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the SharedAccess
   */
  select?: Prisma.SharedAccessSelect<ExtArgs> | null
  /**
   * Omit specific fields from the SharedAccess
   */
  omit?: Prisma.SharedAccessOmit<ExtArgs> | null
  /**
   * Filter, which SharedAccess to fetch.
   */
  where?: Prisma.SharedAccessWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of SharedAccesses to fetch.
   */
  orderBy?: Prisma.SharedAccessOrderByWithRelationInput | Prisma.SharedAccessOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for SharedAccesses.
   */
  cursor?: Prisma.SharedAccessWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` SharedAccesses from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` SharedAccesses.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of SharedAccesses.
   */
  distinct?: Prisma.SharedAccessScalarFieldEnum | Prisma.SharedAccessScalarFieldEnum[]
}

/**
 * SharedAccess findMany
 */
export type SharedAccessFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the SharedAccess
   */
  select?: Prisma.SharedAccessSelect<ExtArgs> | null
  /**
   * Omit specific fields from the SharedAccess
   */
  omit?: Prisma.SharedAccessOmit<ExtArgs> | null
  /**
   * Filter, which SharedAccesses to fetch.
   */
  where?: Prisma.SharedAccessWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of SharedAccesses to fetch.
   */
  orderBy?: Prisma.SharedAccessOrderByWithRelationInput | Prisma.SharedAccessOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing SharedAccesses.
   */
  cursor?: Prisma.SharedAccessWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` SharedAccesses from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` SharedAccesses.
   */
  skip?: number
  distinct?: Prisma.SharedAccessScalarFieldEnum | Prisma.SharedAccessScalarFieldEnum[]
}

/**
 * SharedAccess create
 */
export type SharedAccessCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the SharedAccess
   */
  select?: Prisma.SharedAccessSelect<ExtArgs> | null
  /**
   * Omit specific fields from the SharedAccess
   */
  omit?: Prisma.SharedAccessOmit<ExtArgs> | null
  /**
   * The data needed to create a SharedAccess.
   */
  data: Prisma.XOR<Prisma.SharedAccessCreateInput, Prisma.SharedAccessUncheckedCreateInput>
}

/**
 * SharedAccess createMany
 */
export type SharedAccessCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many SharedAccesses.
   */
  data: Prisma.SharedAccessCreateManyInput | Prisma.SharedAccessCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * SharedAccess createManyAndReturn
 */
export type SharedAccessCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the SharedAccess
   */
  select?: Prisma.SharedAccessSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the SharedAccess
   */
  omit?: Prisma.SharedAccessOmit<ExtArgs> | null
  /**
   * The data used to create many SharedAccesses.
   */
  data: Prisma.SharedAccessCreateManyInput | Prisma.SharedAccessCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * SharedAccess update
 */
export type SharedAccessUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the SharedAccess
   */
  select?: Prisma.SharedAccessSelect<ExtArgs> | null
  /**
   * Omit specific fields from the SharedAccess
   */
  omit?: Prisma.SharedAccessOmit<ExtArgs> | null
  /**
   * The data needed to update a SharedAccess.
   */
  data: Prisma.XOR<Prisma.SharedAccessUpdateInput, Prisma.SharedAccessUncheckedUpdateInput>
  /**
   * Choose, which SharedAccess to update.
   */
  where: Prisma.SharedAccessWhereUniqueInput
}

/**
 * SharedAccess updateMany
 */
export type SharedAccessUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update SharedAccesses.
   */
  data: Prisma.XOR<Prisma.SharedAccessUpdateManyMutationInput, Prisma.SharedAccessUncheckedUpdateManyInput>
  /**
   * Filter which SharedAccesses to update
   */
  where?: Prisma.SharedAccessWhereInput
  /**
   * Limit how many SharedAccesses to update.
   */
  limit?: number
}

/**
 * SharedAccess updateManyAndReturn
 */
export type SharedAccessUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the SharedAccess
   */
  select?: Prisma.SharedAccessSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the SharedAccess
   */
  omit?: Prisma.SharedAccessOmit<ExtArgs> | null
  /**
   * The data used to update SharedAccesses.
   */
  data: Prisma.XOR<Prisma.SharedAccessUpdateManyMutationInput, Prisma.SharedAccessUncheckedUpdateManyInput>
  /**
   * Filter which SharedAccesses to update
   */
  where?: Prisma.SharedAccessWhereInput
  /**
   * Limit how many SharedAccesses to update.
   */
  limit?: number
}

/**
 * SharedAccess upsert
 */
export type SharedAccessUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the SharedAccess
   */
  select?: Prisma.SharedAccessSelect<ExtArgs> | null
  /**
   * Omit specific fields from the SharedAccess
   */
  omit?: Prisma.SharedAccessOmit<ExtArgs> | null
  /**
   * The filter to search for the SharedAccess to update in case it exists.
   */
  where: Prisma.SharedAccessWhereUniqueInput
  /**
   * In case the SharedAccess found by the `where` argument doesn't exist, create a new SharedAccess with this data.
   */
  create: Prisma.XOR<Prisma.SharedAccessCreateInput, Prisma.SharedAccessUncheckedCreateInput>
  /**
   * In case the SharedAccess was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.SharedAccessUpdateInput, Prisma.SharedAccessUncheckedUpdateInput>
}

/**
 * SharedAccess delete
 */
export type SharedAccessDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the SharedAccess
   */
  select?: Prisma.SharedAccessSelect<ExtArgs> | null
  /**
   * Omit specific fields from the SharedAccess
   */
  omit?: Prisma.SharedAccessOmit<ExtArgs> | null
  /**
   * Filter which SharedAccess to delete.
   */
  where: Prisma.SharedAccessWhereUniqueInput
}

/**
 * SharedAccess deleteMany
 */
export type SharedAccessDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which SharedAccesses to delete
   */
  where?: Prisma.SharedAccessWhereInput
  /**
   * Limit how many SharedAccesses to delete.
   */
  limit?: number
}

/**
 * SharedAccess without action
 */
export type SharedAccessDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the SharedAccess
   */
  select?: Prisma.SharedAccessSelect<ExtArgs> | null
  /**
   * Omit specific fields from the SharedAccess
   */
  omit?: Prisma.SharedAccessOmit<ExtArgs> | null
}
