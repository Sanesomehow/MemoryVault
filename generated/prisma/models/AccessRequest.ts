
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `AccessRequest` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model AccessRequest
 * 
 */
export type AccessRequestModel = runtime.Types.Result.DefaultSelection<Prisma.$AccessRequestPayload>

export type AggregateAccessRequest = {
  _count: AccessRequestCountAggregateOutputType | null
  _min: AccessRequestMinAggregateOutputType | null
  _max: AccessRequestMaxAggregateOutputType | null
}

export type AccessRequestMinAggregateOutputType = {
  id: string | null
  requesterWallet: string | null
  ownerWallet: string | null
  mintAddress: string | null
  nftName: string | null
  message: string | null
  status: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type AccessRequestMaxAggregateOutputType = {
  id: string | null
  requesterWallet: string | null
  ownerWallet: string | null
  mintAddress: string | null
  nftName: string | null
  message: string | null
  status: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type AccessRequestCountAggregateOutputType = {
  id: number
  requesterWallet: number
  ownerWallet: number
  mintAddress: number
  nftName: number
  message: number
  status: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type AccessRequestMinAggregateInputType = {
  id?: true
  requesterWallet?: true
  ownerWallet?: true
  mintAddress?: true
  nftName?: true
  message?: true
  status?: true
  createdAt?: true
  updatedAt?: true
}

export type AccessRequestMaxAggregateInputType = {
  id?: true
  requesterWallet?: true
  ownerWallet?: true
  mintAddress?: true
  nftName?: true
  message?: true
  status?: true
  createdAt?: true
  updatedAt?: true
}

export type AccessRequestCountAggregateInputType = {
  id?: true
  requesterWallet?: true
  ownerWallet?: true
  mintAddress?: true
  nftName?: true
  message?: true
  status?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type AccessRequestAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which AccessRequest to aggregate.
   */
  where?: Prisma.AccessRequestWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of AccessRequests to fetch.
   */
  orderBy?: Prisma.AccessRequestOrderByWithRelationInput | Prisma.AccessRequestOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.AccessRequestWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` AccessRequests from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` AccessRequests.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned AccessRequests
  **/
  _count?: true | AccessRequestCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: AccessRequestMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: AccessRequestMaxAggregateInputType
}

export type GetAccessRequestAggregateType<T extends AccessRequestAggregateArgs> = {
      [P in keyof T & keyof AggregateAccessRequest]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateAccessRequest[P]>
    : Prisma.GetScalarType<T[P], AggregateAccessRequest[P]>
}




export type AccessRequestGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.AccessRequestWhereInput
  orderBy?: Prisma.AccessRequestOrderByWithAggregationInput | Prisma.AccessRequestOrderByWithAggregationInput[]
  by: Prisma.AccessRequestScalarFieldEnum[] | Prisma.AccessRequestScalarFieldEnum
  having?: Prisma.AccessRequestScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: AccessRequestCountAggregateInputType | true
  _min?: AccessRequestMinAggregateInputType
  _max?: AccessRequestMaxAggregateInputType
}

export type AccessRequestGroupByOutputType = {
  id: string
  requesterWallet: string
  ownerWallet: string
  mintAddress: string
  nftName: string | null
  message: string | null
  status: string
  createdAt: Date
  updatedAt: Date
  _count: AccessRequestCountAggregateOutputType | null
  _min: AccessRequestMinAggregateOutputType | null
  _max: AccessRequestMaxAggregateOutputType | null
}

type GetAccessRequestGroupByPayload<T extends AccessRequestGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<AccessRequestGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof AccessRequestGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], AccessRequestGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], AccessRequestGroupByOutputType[P]>
      }
    >
  >



export type AccessRequestWhereInput = {
  AND?: Prisma.AccessRequestWhereInput | Prisma.AccessRequestWhereInput[]
  OR?: Prisma.AccessRequestWhereInput[]
  NOT?: Prisma.AccessRequestWhereInput | Prisma.AccessRequestWhereInput[]
  id?: Prisma.StringFilter<"AccessRequest"> | string
  requesterWallet?: Prisma.StringFilter<"AccessRequest"> | string
  ownerWallet?: Prisma.StringFilter<"AccessRequest"> | string
  mintAddress?: Prisma.StringFilter<"AccessRequest"> | string
  nftName?: Prisma.StringNullableFilter<"AccessRequest"> | string | null
  message?: Prisma.StringNullableFilter<"AccessRequest"> | string | null
  status?: Prisma.StringFilter<"AccessRequest"> | string
  createdAt?: Prisma.DateTimeFilter<"AccessRequest"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"AccessRequest"> | Date | string
}

export type AccessRequestOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  requesterWallet?: Prisma.SortOrder
  ownerWallet?: Prisma.SortOrder
  mintAddress?: Prisma.SortOrder
  nftName?: Prisma.SortOrderInput | Prisma.SortOrder
  message?: Prisma.SortOrderInput | Prisma.SortOrder
  status?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type AccessRequestWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  requesterWallet_mintAddress?: Prisma.AccessRequestRequesterWalletMintAddressCompoundUniqueInput
  AND?: Prisma.AccessRequestWhereInput | Prisma.AccessRequestWhereInput[]
  OR?: Prisma.AccessRequestWhereInput[]
  NOT?: Prisma.AccessRequestWhereInput | Prisma.AccessRequestWhereInput[]
  requesterWallet?: Prisma.StringFilter<"AccessRequest"> | string
  ownerWallet?: Prisma.StringFilter<"AccessRequest"> | string
  mintAddress?: Prisma.StringFilter<"AccessRequest"> | string
  nftName?: Prisma.StringNullableFilter<"AccessRequest"> | string | null
  message?: Prisma.StringNullableFilter<"AccessRequest"> | string | null
  status?: Prisma.StringFilter<"AccessRequest"> | string
  createdAt?: Prisma.DateTimeFilter<"AccessRequest"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"AccessRequest"> | Date | string
}, "id" | "requesterWallet_mintAddress">

export type AccessRequestOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  requesterWallet?: Prisma.SortOrder
  ownerWallet?: Prisma.SortOrder
  mintAddress?: Prisma.SortOrder
  nftName?: Prisma.SortOrderInput | Prisma.SortOrder
  message?: Prisma.SortOrderInput | Prisma.SortOrder
  status?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.AccessRequestCountOrderByAggregateInput
  _max?: Prisma.AccessRequestMaxOrderByAggregateInput
  _min?: Prisma.AccessRequestMinOrderByAggregateInput
}

export type AccessRequestScalarWhereWithAggregatesInput = {
  AND?: Prisma.AccessRequestScalarWhereWithAggregatesInput | Prisma.AccessRequestScalarWhereWithAggregatesInput[]
  OR?: Prisma.AccessRequestScalarWhereWithAggregatesInput[]
  NOT?: Prisma.AccessRequestScalarWhereWithAggregatesInput | Prisma.AccessRequestScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"AccessRequest"> | string
  requesterWallet?: Prisma.StringWithAggregatesFilter<"AccessRequest"> | string
  ownerWallet?: Prisma.StringWithAggregatesFilter<"AccessRequest"> | string
  mintAddress?: Prisma.StringWithAggregatesFilter<"AccessRequest"> | string
  nftName?: Prisma.StringNullableWithAggregatesFilter<"AccessRequest"> | string | null
  message?: Prisma.StringNullableWithAggregatesFilter<"AccessRequest"> | string | null
  status?: Prisma.StringWithAggregatesFilter<"AccessRequest"> | string
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"AccessRequest"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"AccessRequest"> | Date | string
}

export type AccessRequestCreateInput = {
  id?: string
  requesterWallet: string
  ownerWallet: string
  mintAddress: string
  nftName?: string | null
  message?: string | null
  status?: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type AccessRequestUncheckedCreateInput = {
  id?: string
  requesterWallet: string
  ownerWallet: string
  mintAddress: string
  nftName?: string | null
  message?: string | null
  status?: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type AccessRequestUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  requesterWallet?: Prisma.StringFieldUpdateOperationsInput | string
  ownerWallet?: Prisma.StringFieldUpdateOperationsInput | string
  mintAddress?: Prisma.StringFieldUpdateOperationsInput | string
  nftName?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  message?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  status?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type AccessRequestUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  requesterWallet?: Prisma.StringFieldUpdateOperationsInput | string
  ownerWallet?: Prisma.StringFieldUpdateOperationsInput | string
  mintAddress?: Prisma.StringFieldUpdateOperationsInput | string
  nftName?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  message?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  status?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type AccessRequestCreateManyInput = {
  id?: string
  requesterWallet: string
  ownerWallet: string
  mintAddress: string
  nftName?: string | null
  message?: string | null
  status?: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type AccessRequestUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  requesterWallet?: Prisma.StringFieldUpdateOperationsInput | string
  ownerWallet?: Prisma.StringFieldUpdateOperationsInput | string
  mintAddress?: Prisma.StringFieldUpdateOperationsInput | string
  nftName?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  message?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  status?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type AccessRequestUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  requesterWallet?: Prisma.StringFieldUpdateOperationsInput | string
  ownerWallet?: Prisma.StringFieldUpdateOperationsInput | string
  mintAddress?: Prisma.StringFieldUpdateOperationsInput | string
  nftName?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  message?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  status?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type AccessRequestRequesterWalletMintAddressCompoundUniqueInput = {
  requesterWallet: string
  mintAddress: string
}

export type AccessRequestCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  requesterWallet?: Prisma.SortOrder
  ownerWallet?: Prisma.SortOrder
  mintAddress?: Prisma.SortOrder
  nftName?: Prisma.SortOrder
  message?: Prisma.SortOrder
  status?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type AccessRequestMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  requesterWallet?: Prisma.SortOrder
  ownerWallet?: Prisma.SortOrder
  mintAddress?: Prisma.SortOrder
  nftName?: Prisma.SortOrder
  message?: Prisma.SortOrder
  status?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type AccessRequestMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  requesterWallet?: Prisma.SortOrder
  ownerWallet?: Prisma.SortOrder
  mintAddress?: Prisma.SortOrder
  nftName?: Prisma.SortOrder
  message?: Prisma.SortOrder
  status?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type NullableStringFieldUpdateOperationsInput = {
  set?: string | null
}



export type AccessRequestSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  requesterWallet?: boolean
  ownerWallet?: boolean
  mintAddress?: boolean
  nftName?: boolean
  message?: boolean
  status?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}, ExtArgs["result"]["accessRequest"]>

export type AccessRequestSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  requesterWallet?: boolean
  ownerWallet?: boolean
  mintAddress?: boolean
  nftName?: boolean
  message?: boolean
  status?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}, ExtArgs["result"]["accessRequest"]>

export type AccessRequestSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  requesterWallet?: boolean
  ownerWallet?: boolean
  mintAddress?: boolean
  nftName?: boolean
  message?: boolean
  status?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}, ExtArgs["result"]["accessRequest"]>

export type AccessRequestSelectScalar = {
  id?: boolean
  requesterWallet?: boolean
  ownerWallet?: boolean
  mintAddress?: boolean
  nftName?: boolean
  message?: boolean
  status?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type AccessRequestOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "requesterWallet" | "ownerWallet" | "mintAddress" | "nftName" | "message" | "status" | "createdAt" | "updatedAt", ExtArgs["result"]["accessRequest"]>

export type $AccessRequestPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "AccessRequest"
  objects: {}
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    requesterWallet: string
    ownerWallet: string
    mintAddress: string
    nftName: string | null
    message: string | null
    status: string
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["accessRequest"]>
  composites: {}
}

export type AccessRequestGetPayload<S extends boolean | null | undefined | AccessRequestDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$AccessRequestPayload, S>

export type AccessRequestCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<AccessRequestFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: AccessRequestCountAggregateInputType | true
  }

export interface AccessRequestDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['AccessRequest'], meta: { name: 'AccessRequest' } }
  /**
   * Find zero or one AccessRequest that matches the filter.
   * @param {AccessRequestFindUniqueArgs} args - Arguments to find a AccessRequest
   * @example
   * // Get one AccessRequest
   * const accessRequest = await prisma.accessRequest.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends AccessRequestFindUniqueArgs>(args: Prisma.SelectSubset<T, AccessRequestFindUniqueArgs<ExtArgs>>): Prisma.Prisma__AccessRequestClient<runtime.Types.Result.GetResult<Prisma.$AccessRequestPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one AccessRequest that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {AccessRequestFindUniqueOrThrowArgs} args - Arguments to find a AccessRequest
   * @example
   * // Get one AccessRequest
   * const accessRequest = await prisma.accessRequest.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends AccessRequestFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, AccessRequestFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__AccessRequestClient<runtime.Types.Result.GetResult<Prisma.$AccessRequestPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first AccessRequest that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AccessRequestFindFirstArgs} args - Arguments to find a AccessRequest
   * @example
   * // Get one AccessRequest
   * const accessRequest = await prisma.accessRequest.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends AccessRequestFindFirstArgs>(args?: Prisma.SelectSubset<T, AccessRequestFindFirstArgs<ExtArgs>>): Prisma.Prisma__AccessRequestClient<runtime.Types.Result.GetResult<Prisma.$AccessRequestPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first AccessRequest that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AccessRequestFindFirstOrThrowArgs} args - Arguments to find a AccessRequest
   * @example
   * // Get one AccessRequest
   * const accessRequest = await prisma.accessRequest.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends AccessRequestFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, AccessRequestFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__AccessRequestClient<runtime.Types.Result.GetResult<Prisma.$AccessRequestPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more AccessRequests that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AccessRequestFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all AccessRequests
   * const accessRequests = await prisma.accessRequest.findMany()
   * 
   * // Get first 10 AccessRequests
   * const accessRequests = await prisma.accessRequest.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const accessRequestWithIdOnly = await prisma.accessRequest.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends AccessRequestFindManyArgs>(args?: Prisma.SelectSubset<T, AccessRequestFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$AccessRequestPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a AccessRequest.
   * @param {AccessRequestCreateArgs} args - Arguments to create a AccessRequest.
   * @example
   * // Create one AccessRequest
   * const AccessRequest = await prisma.accessRequest.create({
   *   data: {
   *     // ... data to create a AccessRequest
   *   }
   * })
   * 
   */
  create<T extends AccessRequestCreateArgs>(args: Prisma.SelectSubset<T, AccessRequestCreateArgs<ExtArgs>>): Prisma.Prisma__AccessRequestClient<runtime.Types.Result.GetResult<Prisma.$AccessRequestPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many AccessRequests.
   * @param {AccessRequestCreateManyArgs} args - Arguments to create many AccessRequests.
   * @example
   * // Create many AccessRequests
   * const accessRequest = await prisma.accessRequest.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends AccessRequestCreateManyArgs>(args?: Prisma.SelectSubset<T, AccessRequestCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many AccessRequests and returns the data saved in the database.
   * @param {AccessRequestCreateManyAndReturnArgs} args - Arguments to create many AccessRequests.
   * @example
   * // Create many AccessRequests
   * const accessRequest = await prisma.accessRequest.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many AccessRequests and only return the `id`
   * const accessRequestWithIdOnly = await prisma.accessRequest.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends AccessRequestCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, AccessRequestCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$AccessRequestPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a AccessRequest.
   * @param {AccessRequestDeleteArgs} args - Arguments to delete one AccessRequest.
   * @example
   * // Delete one AccessRequest
   * const AccessRequest = await prisma.accessRequest.delete({
   *   where: {
   *     // ... filter to delete one AccessRequest
   *   }
   * })
   * 
   */
  delete<T extends AccessRequestDeleteArgs>(args: Prisma.SelectSubset<T, AccessRequestDeleteArgs<ExtArgs>>): Prisma.Prisma__AccessRequestClient<runtime.Types.Result.GetResult<Prisma.$AccessRequestPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one AccessRequest.
   * @param {AccessRequestUpdateArgs} args - Arguments to update one AccessRequest.
   * @example
   * // Update one AccessRequest
   * const accessRequest = await prisma.accessRequest.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends AccessRequestUpdateArgs>(args: Prisma.SelectSubset<T, AccessRequestUpdateArgs<ExtArgs>>): Prisma.Prisma__AccessRequestClient<runtime.Types.Result.GetResult<Prisma.$AccessRequestPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more AccessRequests.
   * @param {AccessRequestDeleteManyArgs} args - Arguments to filter AccessRequests to delete.
   * @example
   * // Delete a few AccessRequests
   * const { count } = await prisma.accessRequest.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends AccessRequestDeleteManyArgs>(args?: Prisma.SelectSubset<T, AccessRequestDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more AccessRequests.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AccessRequestUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many AccessRequests
   * const accessRequest = await prisma.accessRequest.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends AccessRequestUpdateManyArgs>(args: Prisma.SelectSubset<T, AccessRequestUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more AccessRequests and returns the data updated in the database.
   * @param {AccessRequestUpdateManyAndReturnArgs} args - Arguments to update many AccessRequests.
   * @example
   * // Update many AccessRequests
   * const accessRequest = await prisma.accessRequest.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more AccessRequests and only return the `id`
   * const accessRequestWithIdOnly = await prisma.accessRequest.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends AccessRequestUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, AccessRequestUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$AccessRequestPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one AccessRequest.
   * @param {AccessRequestUpsertArgs} args - Arguments to update or create a AccessRequest.
   * @example
   * // Update or create a AccessRequest
   * const accessRequest = await prisma.accessRequest.upsert({
   *   create: {
   *     // ... data to create a AccessRequest
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the AccessRequest we want to update
   *   }
   * })
   */
  upsert<T extends AccessRequestUpsertArgs>(args: Prisma.SelectSubset<T, AccessRequestUpsertArgs<ExtArgs>>): Prisma.Prisma__AccessRequestClient<runtime.Types.Result.GetResult<Prisma.$AccessRequestPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of AccessRequests.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AccessRequestCountArgs} args - Arguments to filter AccessRequests to count.
   * @example
   * // Count the number of AccessRequests
   * const count = await prisma.accessRequest.count({
   *   where: {
   *     // ... the filter for the AccessRequests we want to count
   *   }
   * })
  **/
  count<T extends AccessRequestCountArgs>(
    args?: Prisma.Subset<T, AccessRequestCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], AccessRequestCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a AccessRequest.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AccessRequestAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends AccessRequestAggregateArgs>(args: Prisma.Subset<T, AccessRequestAggregateArgs>): Prisma.PrismaPromise<GetAccessRequestAggregateType<T>>

  /**
   * Group by AccessRequest.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AccessRequestGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends AccessRequestGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: AccessRequestGroupByArgs['orderBy'] }
      : { orderBy?: AccessRequestGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, AccessRequestGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAccessRequestGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the AccessRequest model
 */
readonly fields: AccessRequestFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for AccessRequest.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__AccessRequestClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the AccessRequest model
 */
export interface AccessRequestFieldRefs {
  readonly id: Prisma.FieldRef<"AccessRequest", 'String'>
  readonly requesterWallet: Prisma.FieldRef<"AccessRequest", 'String'>
  readonly ownerWallet: Prisma.FieldRef<"AccessRequest", 'String'>
  readonly mintAddress: Prisma.FieldRef<"AccessRequest", 'String'>
  readonly nftName: Prisma.FieldRef<"AccessRequest", 'String'>
  readonly message: Prisma.FieldRef<"AccessRequest", 'String'>
  readonly status: Prisma.FieldRef<"AccessRequest", 'String'>
  readonly createdAt: Prisma.FieldRef<"AccessRequest", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"AccessRequest", 'DateTime'>
}
    

// Custom InputTypes
/**
 * AccessRequest findUnique
 */
export type AccessRequestFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AccessRequest
   */
  select?: Prisma.AccessRequestSelect<ExtArgs> | null
  /**
   * Omit specific fields from the AccessRequest
   */
  omit?: Prisma.AccessRequestOmit<ExtArgs> | null
  /**
   * Filter, which AccessRequest to fetch.
   */
  where: Prisma.AccessRequestWhereUniqueInput
}

/**
 * AccessRequest findUniqueOrThrow
 */
export type AccessRequestFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AccessRequest
   */
  select?: Prisma.AccessRequestSelect<ExtArgs> | null
  /**
   * Omit specific fields from the AccessRequest
   */
  omit?: Prisma.AccessRequestOmit<ExtArgs> | null
  /**
   * Filter, which AccessRequest to fetch.
   */
  where: Prisma.AccessRequestWhereUniqueInput
}

/**
 * AccessRequest findFirst
 */
export type AccessRequestFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AccessRequest
   */
  select?: Prisma.AccessRequestSelect<ExtArgs> | null
  /**
   * Omit specific fields from the AccessRequest
   */
  omit?: Prisma.AccessRequestOmit<ExtArgs> | null
  /**
   * Filter, which AccessRequest to fetch.
   */
  where?: Prisma.AccessRequestWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of AccessRequests to fetch.
   */
  orderBy?: Prisma.AccessRequestOrderByWithRelationInput | Prisma.AccessRequestOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for AccessRequests.
   */
  cursor?: Prisma.AccessRequestWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` AccessRequests from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` AccessRequests.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of AccessRequests.
   */
  distinct?: Prisma.AccessRequestScalarFieldEnum | Prisma.AccessRequestScalarFieldEnum[]
}

/**
 * AccessRequest findFirstOrThrow
 */
export type AccessRequestFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AccessRequest
   */
  select?: Prisma.AccessRequestSelect<ExtArgs> | null
  /**
   * Omit specific fields from the AccessRequest
   */
  omit?: Prisma.AccessRequestOmit<ExtArgs> | null
  /**
   * Filter, which AccessRequest to fetch.
   */
  where?: Prisma.AccessRequestWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of AccessRequests to fetch.
   */
  orderBy?: Prisma.AccessRequestOrderByWithRelationInput | Prisma.AccessRequestOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for AccessRequests.
   */
  cursor?: Prisma.AccessRequestWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` AccessRequests from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` AccessRequests.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of AccessRequests.
   */
  distinct?: Prisma.AccessRequestScalarFieldEnum | Prisma.AccessRequestScalarFieldEnum[]
}

/**
 * AccessRequest findMany
 */
export type AccessRequestFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AccessRequest
   */
  select?: Prisma.AccessRequestSelect<ExtArgs> | null
  /**
   * Omit specific fields from the AccessRequest
   */
  omit?: Prisma.AccessRequestOmit<ExtArgs> | null
  /**
   * Filter, which AccessRequests to fetch.
   */
  where?: Prisma.AccessRequestWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of AccessRequests to fetch.
   */
  orderBy?: Prisma.AccessRequestOrderByWithRelationInput | Prisma.AccessRequestOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing AccessRequests.
   */
  cursor?: Prisma.AccessRequestWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` AccessRequests from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` AccessRequests.
   */
  skip?: number
  distinct?: Prisma.AccessRequestScalarFieldEnum | Prisma.AccessRequestScalarFieldEnum[]
}

/**
 * AccessRequest create
 */
export type AccessRequestCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AccessRequest
   */
  select?: Prisma.AccessRequestSelect<ExtArgs> | null
  /**
   * Omit specific fields from the AccessRequest
   */
  omit?: Prisma.AccessRequestOmit<ExtArgs> | null
  /**
   * The data needed to create a AccessRequest.
   */
  data: Prisma.XOR<Prisma.AccessRequestCreateInput, Prisma.AccessRequestUncheckedCreateInput>
}

/**
 * AccessRequest createMany
 */
export type AccessRequestCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many AccessRequests.
   */
  data: Prisma.AccessRequestCreateManyInput | Prisma.AccessRequestCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * AccessRequest createManyAndReturn
 */
export type AccessRequestCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AccessRequest
   */
  select?: Prisma.AccessRequestSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the AccessRequest
   */
  omit?: Prisma.AccessRequestOmit<ExtArgs> | null
  /**
   * The data used to create many AccessRequests.
   */
  data: Prisma.AccessRequestCreateManyInput | Prisma.AccessRequestCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * AccessRequest update
 */
export type AccessRequestUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AccessRequest
   */
  select?: Prisma.AccessRequestSelect<ExtArgs> | null
  /**
   * Omit specific fields from the AccessRequest
   */
  omit?: Prisma.AccessRequestOmit<ExtArgs> | null
  /**
   * The data needed to update a AccessRequest.
   */
  data: Prisma.XOR<Prisma.AccessRequestUpdateInput, Prisma.AccessRequestUncheckedUpdateInput>
  /**
   * Choose, which AccessRequest to update.
   */
  where: Prisma.AccessRequestWhereUniqueInput
}

/**
 * AccessRequest updateMany
 */
export type AccessRequestUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update AccessRequests.
   */
  data: Prisma.XOR<Prisma.AccessRequestUpdateManyMutationInput, Prisma.AccessRequestUncheckedUpdateManyInput>
  /**
   * Filter which AccessRequests to update
   */
  where?: Prisma.AccessRequestWhereInput
  /**
   * Limit how many AccessRequests to update.
   */
  limit?: number
}

/**
 * AccessRequest updateManyAndReturn
 */
export type AccessRequestUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AccessRequest
   */
  select?: Prisma.AccessRequestSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the AccessRequest
   */
  omit?: Prisma.AccessRequestOmit<ExtArgs> | null
  /**
   * The data used to update AccessRequests.
   */
  data: Prisma.XOR<Prisma.AccessRequestUpdateManyMutationInput, Prisma.AccessRequestUncheckedUpdateManyInput>
  /**
   * Filter which AccessRequests to update
   */
  where?: Prisma.AccessRequestWhereInput
  /**
   * Limit how many AccessRequests to update.
   */
  limit?: number
}

/**
 * AccessRequest upsert
 */
export type AccessRequestUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AccessRequest
   */
  select?: Prisma.AccessRequestSelect<ExtArgs> | null
  /**
   * Omit specific fields from the AccessRequest
   */
  omit?: Prisma.AccessRequestOmit<ExtArgs> | null
  /**
   * The filter to search for the AccessRequest to update in case it exists.
   */
  where: Prisma.AccessRequestWhereUniqueInput
  /**
   * In case the AccessRequest found by the `where` argument doesn't exist, create a new AccessRequest with this data.
   */
  create: Prisma.XOR<Prisma.AccessRequestCreateInput, Prisma.AccessRequestUncheckedCreateInput>
  /**
   * In case the AccessRequest was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.AccessRequestUpdateInput, Prisma.AccessRequestUncheckedUpdateInput>
}

/**
 * AccessRequest delete
 */
export type AccessRequestDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AccessRequest
   */
  select?: Prisma.AccessRequestSelect<ExtArgs> | null
  /**
   * Omit specific fields from the AccessRequest
   */
  omit?: Prisma.AccessRequestOmit<ExtArgs> | null
  /**
   * Filter which AccessRequest to delete.
   */
  where: Prisma.AccessRequestWhereUniqueInput
}

/**
 * AccessRequest deleteMany
 */
export type AccessRequestDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which AccessRequests to delete
   */
  where?: Prisma.AccessRequestWhereInput
  /**
   * Limit how many AccessRequests to delete.
   */
  limit?: number
}

/**
 * AccessRequest without action
 */
export type AccessRequestDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AccessRequest
   */
  select?: Prisma.AccessRequestSelect<ExtArgs> | null
  /**
   * Omit specific fields from the AccessRequest
   */
  omit?: Prisma.AccessRequestOmit<ExtArgs> | null
}
